NOTAS SOBRE TEMAS Y DUDAS QUE ME VAN SURGIENDO MIENTRAS HAGO EL TFG:

-> Sobre GIT:
$ls -a -> listar directorios ocultos incluido el .git en la carpeta del TFG.
$git push -> Tras haber subido la carpeta una primera vez, con ejecutar esto ya se actualizará el repositorio remoto de forma automática, en otro caso, si deseas añadir primero nuevos ficheros al repositorio local:
$git checkout main -> para asegurarte de que estás en la rama principal que por lo general va a ser la que deseas subir.
$git add . -> Añadir ficheros actuales a tu repositorio
$git commit -m "Mensaje del commit" -> Guardar cambios realizados sobre el repsoitorio
$git push (-u origin main; esto solo es obligatorio la primera vez) -> subir rama main de tu repositorio local a GitHub (se sobreentiende que ya has añadido el repositorio remoto con "git remote add origin <enlace_del_repositorio>")
$git ls-files /ruta ->  Este comando te mostrará una lista de los archivos que están bajo el control de versiones de Git en tu repositorio.
$git rm (-r) nombre_del_archivo -> Para eliminar archivos del repositorio. El flag -r es necesario si eliminas una carpeta con subdirectorios.
$git reset --hard HEAD~n -> Cada vez que "Tu rama está adelantada a origin/main por n commits" te salga, usa esto para borrar los n commits pendientes. En caso de que te borres más commits de la cuenta, usa "git pull" para descargar lo del repositorio remoto 

-> En la base de datos BLAST, pone que los servidores de la API "are a shared resource and
not intended for projects that involve a large number of BLAST searches. We provide the Stand-alone
BLAST+ binaries, Docker Image and Elastic BLAST for these purposes." Esto indica que si las consultas
son altas, digamos, de más de 1000 genomas por consulta, es mejor usar la herramienta BLAST+ que ofrece
acceso a la base de datos por línea de comandos, y si no ElasticBLAST, que es la versión en la
nube,pero: "ElasticBLAST status: beta. Platforms available: AWS, GCP (account required)"

-> Creo que solo tiene sentido usar BLAST para hacer la base de datos y guardar los .fasta con los que se trabajarán ahí y
   en subbases asociadas. Si BLAST permite hacer árboles filogenéticos, también debería usarse para ello.
   En lo referente a los algoritmos de búsqueda, creo que lo mejor será crearlos por tu cuenta y comparar los
   resultados con BLAST para asegurarte de que funcionan bien, pero nada más. Mete un mínimo de longitud de cadenas
   coincidentes (el mismo que BLAST) para descartar los emparejamientos casuales.

-> La API de MGnify ofrece consultas de muchos tipos de datos, ¿cuáles estoy buscando? SUpuestamente, la url a
la API de MGnify es https://www.ebi.ac.uk/metagenomics/api/latest/

-> Uso de BLAST+: https://www.youtube.com/watch?v=1AzujLnr3RM | https://youtu.be/RzlnYOtba_I?si=LD1yW5nEmHCfk9NM

-> Blast incorpora varios programas, los más comunes, blastn, blastp, blastx, tblast y tblastx.

-> También se debe conocer a qué bases de datos Blast se les puede realizar peticiones. Las tienes
en https://ftp.ncbi.nlm.nih.gov/blast/db/ y la documentación de las mismas en https://ftp.ncbi.nlm.nih.gov/blast/documents/blastdb.html

-> Una duda importante es si las secuencias cebo que te van a dar tienen derechos de propiedad o no, porque
si los tienen entonces debes usar una base de datos local, no hacer consultas al servidor.

-> La paridad entre resultados para una determinada consulta en Blast se puede medir con el e-value
de la coincidenica (el e-value es un parámetro del objeto Alignment. Cada objeto BlastRecord es
una lista de objetos Alignment). También se puede medir según la longitud de la coincidencia con
len(hit.target) donde un hit es un Alignment de un BlastRecord.